/*
  
  Authenticate the user with their crosscloud account (their "pod")

  Very simple for now -- we just look for $HOME/.podlogin.json

  { "pod":"http://alice.example", "authtoken":"..."}  

*/

/*jslint browser:false*/
/*jslint devel:false*/
"use strict";

var fs = require('fs');

var userDataFile = process.env.HOME+"/.podlogin.json";

exports.version = '!!VERSION!!';

var userID;
var onLoginCallbacks = [];
var loginRequired = false;
var loginError = null;

exports.getUserID = function () {
	if (userID) return userID;
};

exports.requireLogin = function () {
	loginRequired = true;
	if (loginError) {
		console.error(loginError);
		process.exit(1);
	}
};

exports.suggestProvider = function (providerID) {
	// ignore
};

exports.onLogin = function (callback) {
	//console.log('someone called onLogin', callback, typeof callback);
	onLoginCallbacks.push(callback);
	if (userID) {
		callback(userID);
	}
};

exports.removeOnLogin = function (callback) {
	for (var i = onLoginCallbacks.length-1; i>=0; i--) {
		if (onLoginCallbacks[i] === callback) {
			onLoginCallbacks.splice(i, 1);
		}
	}
};

exports.onLogout = function (callback) {
	// ignore -- we have no way to logout
};

var gotLogin = function (id) {
	if (userID) {
		gotLogout();
	}
	userID = id;
	onLoginCallbacks.forEach(function(cb) {
		cb(userID);
	});
};

fs.readFile(userDataFile, "utf8", function(err, data) {
	if (err === null) {
		var config = JSON.parse(data);
		if (config.hasOwnProperty('pod')) {
			gotLogin(config.pod);
			return;
		}
		loginError = userDataFile + ":" + "missing 'pod' property";
	} else {
		loginError = ""+err;
	}
	if (loginRequired) {
		console.error(loginError);
		process.exit(1);
	}
});
